/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "../assets/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(4);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var character_1 = __webpack_require__(2);
var Line_1 = __webpack_require__(3);
window.addEventListener('load', function () {
    var canvas = document.getElementById('canvas');
    var context = canvas.getContext('2d');
    var char = new character_1.default(['1', '2']);
    var canvasWidth = .8;
    char.x = canvas.width / 2;
    var line = new Line_1.default(canvas, context);
    setInterval(update, 1);
    canvas.width = window.innerWidth * canvasWidth;
    canvas.height = window.innerHeight * canvasWidth;
    window.addEventListener('resize', function () {
        canvas.width = window.innerWidth * canvasWidth;
        canvas.height = window.innerHeight * canvasWidth;
        char.resize(canvas);
    });
    window.addEventListener('mousemove', function (e) {
        var pos = {
            x: e.pageX - canvas.getBoundingClientRect().left,
            y: e.pageY - canvas.getBoundingClientRect().top
        };
        updateLine(pos.x);
    });
    window.addEventListener('touchmove', function (e) {
        var touch = e.touches[0];
        var pos = {
            x: touch.clientX - canvas.getBoundingClientRect().left,
            y: touch.clientY - canvas.getBoundingClientRect().top
        };
        updateLine(pos.x);
    });
    function updateLine(x) {
        line.x = x;
        line.y = 0;
        //console.log('pos', x);
        var b = 25 - Math.abs((line.x - canvas.width / 2)) / 4;
        if (b < 0)
            b = 0;
        canvas.style = 'filter:brightness(' + (b + 100) + '%)';
    }
    function update() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.fillStyle = '#b0e0e6';
        context.fillRect(0, 0, line.x, canvas.height);
        context.fill();
        context.fillStyle = '#eed5d2';
        context.fillRect(line.x, 0, canvas.width - line.x, canvas.height);
        context.fill();
        char.resize(canvas);
        char.DrawImage(canvas, context, line.x);
        line.DrawImage(canvas, context);
    }
});


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var character = /** @class */ (function () {
    function character(arrayOfFiles) {
        this.x = 0;
        this.y = 0;
        this.oneFile = arrayOfFiles.length === 1;
        this.size = { w: 0, h: 0 };
        this.size2 = { w: 0, h: 0 };
        this.imageObj = new Image();
        this.imageObj.src = 'assets/' + arrayOfFiles[0] + '.png';
        this.imageObj2 = new Image();
        if (this.oneFile) {
            this.imageObj2.src = 'assets/' + arrayOfFiles[0] + '.png';
        }
        else {
            this.imageObj2.src = 'assets/' + arrayOfFiles[1] + '.png';
        }
    }
    character.prototype.DrawImage = function (canvas, context, mouseX) {
        if (mouseX === void 0) { mouseX = canvas.width / 2; }
        var clipPrecentage;
        if (this.oneFile) {
            clipPrecentage = (mouseX - (this.x - this.size.w / 2)) / this.size.w * 2;
        }
        else {
            clipPrecentage = (mouseX - (this.x - this.size.w / 2)) / this.size.w;
        }
        //console.log(clipPrecentage);
        if (this.oneFile) {
            context.drawImage(this.imageObj, -this.imageObj.width / 4, 0, this.imageObj.width / 2 * Math.min(1.5, clipPrecentage), this.imageObj.height, this.x - this.size.w / 2, this.y, this.size.w / 2 * Math.min(1.5, clipPrecentage), this.size.h);
            context.drawImage(this.imageObj2, this.imageObj2.width / 2 + this.imageObj2.width / 2 * Math.max(0, clipPrecentage - 0.5), 0, this.imageObj2.width / 2 * (1 - Math.max(0, clipPrecentage - 0.5)), this.imageObj2.height, this.x - this.size2.w / 2 * (1 - Math.max(0, clipPrecentage - 0.5)) + this.size2.w / 4, this.y, this.size2.w / 2 * (1 - Math.max(0, clipPrecentage - 0.5)), this.size2.h);
        }
        else {
            context.drawImage(this.imageObj, 0, 0, this.imageObj.width * clipPrecentage, this.imageObj.height, this.x - this.size.w / 2, this.y, this.size.w * clipPrecentage, this.size.h);
            context.drawImage(this.imageObj2, this.imageObj2.width * clipPrecentage, 0, this.imageObj2.width * (1 - clipPrecentage), this.imageObj2.height, this.x - this.size2.w * (1 - clipPrecentage) + this.size2.w / 2, this.y, this.size2.w * (1 - clipPrecentage), this.size2.h);
        }
    };
    character.prototype.resize = function (canvas) {
        var scale = canvas.height / this.imageObj.height;
        this.size.h = this.imageObj.height * scale;
        this.size.w = this.imageObj.width * scale;
        scale = canvas.height / this.imageObj2.height;
        this.size2.h = this.imageObj2.height * scale;
        this.size2.w = this.imageObj2.width * scale;
        this.x = canvas.width / 2;
    };
    return character;
}());
exports.default = character;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Line = /** @class */ (function () {
    function Line(canvas, context) {
        this.x = 0;
        this.y = 0;
        this.imageObj = new Image();
        this.imageObj.src = 'assets/light.png';
    }
    Line.prototype.DrawImage = function (canvas, context) {
        var scale = canvas.height / this.imageObj.height;
        context.drawImage(this.imageObj, this.x - this.imageObj.width * scale / 2, this.y, this.imageObj.width * scale, this.imageObj.height * scale);
    };
    return Line;
}());
exports.default = Line;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,